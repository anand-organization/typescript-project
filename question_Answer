# some important questions on TS:
What is the difference between let and const in TypeScript?
let and const are used to define a variable in JS/TS, difference between let and const is, let can be reassinged later part of the code but const varibale can not be changes any at any point later.

What is the purpose of a .ts file in TypeScript?
.ts file is used to write typescript code, and .ts is extesnsion which is helpful with converitng all our tpe script code into js, as any runtime only understands js for example browser or node can not process .ts file code.

How do you define a variable in TypeScript with a specific type, such as a number or string?
let age:number=10;
let name:string="anand";

Write the syntax to create an interface named Person with properties name (string) and age (number).
interface Person{
name :string,
age:number
}

What will the following code output, and why?

const greet = (name: string = "Guest"): string => `Hello, ${name}!`
console.log(greet())
console.log(greet("Alice"))
Hello Guest
Hello Alice
How does TypeScript handle type assertions? Provide an example.
const getArea=(l:number,b:number):number=>{
return l*b;
}
getArea(3,6);//worked fine
getArea(3,"six");// will check the type and throw error
const area:string=getArea(3,6);// error as getArea wil return a number and can not be stored in string.

What is the difference between unknown and any in TypeScript?

What is the output of the following code?
type User = { name: string; age: number }
const user: User = { name: "John", age: 30 }
const key: keyof User = "name"
console.log(user[key])
John
#Advanced Questions
What is the difference between interface and type in TypeScript? When would you use one over the other?

What does the readonly modifier do in TypeScript? Provide an example.
we do use readonly modifier in case we we dont want a varible to be changed throug out the program. it's kind of final variable.

Consider the following code. Will it compile? If not, why?

class Person {
    private name: string
    constructor(name: string) {
        this.name = name
    }
}

const person = new Person("Alice")
console.log(person.name)
No it will turn out to an error saying name is a private varibale and can not be accessed out side the class.
Write a function in TypeScript that takes an array of generic type T and returns the last element.

function fun<T>(array:T[]):T{
return array[array.length-1];
}



==================================================================================================
1. Interface vs Type
Task: Create an interface Vehicle with properties make, model, and year. Extend this interface to create a Car interface with an additional property fuelType.
Task: Define a type for a Point in 2D space (x, y) and then create a type for a Rectangle using Point.



interface Vehicle{
make:string,
model:string,
year: number
}

interface Car extends Vehicle{
fuelType:string
}

type Point= {
x:number,
y:number
}
type Rectangle = Point & {
l:number,
w:number
}

2. Generics
Task: Write a function reverseArray that takes an array of generic type T and returns a new array with the elements reversed.
Task: Create a class Box<T> that stores a value of type T. Add methods to get and set the value.
const reverseArray = <T>(array:T[]):T[]=>{
return array.reverse();
}

3. Union and Intersection Types
Task: Create a type for a Circle with a radius property and a Rectangle with width and height. Use an intersection to define a type for a shape that is both a Circle and a Rectangle.
Task: Write a function getValue that takes a union type parameter (string or number) and returns its length if it’s a string or the square if it’s a number.

type Cicle={
radius:number
}
type Rectangle={
width:number,
height:number
}
type Shape=Circle & Rectangle;

function getvalue(args:number | string):number{
if(typeof args === number){
returnargs*args;
}
return args.length;
}


4. Type Narrowing
Task: Write a function formatInput that accepts either a string or a number. If it’s a string, return it in uppercase. If it’s a number, return it multiplied by 2.
Task: Create a type Vehicle with properties type ("car" | "bike") and other properties like fuelType (for car) or gears (for bike). Write a function that takes a Vehicle and uses type narrowing to handle car and bike separately.


5. Advanced Typing
Task: Write a type that takes an object and makes all its properties readonly (Readonly<T> utility type).
Task: Create a type that extracts the keys of an object whose values are of type string.


6. Practical Implementation
Task: Create a simple shopping cart program:
Define an interface for a Product with id, name, price, and quantity.
Write a function addToCart that takes a list of products and a new product, and updates the cart.
Write a function calculateTotal to compute the total price of the products in the cart.


7. TypeScript with Classes
Task: Create a User class with private properties username and password. Add a method to update the password securely.
Task: Create a BankAccount class with a readonly property accountNumber and methods to deposit and withdraw money.


8. Practice Error Handling
Task: Create a function parseJson that takes a JSON string and safely parses it. Return a default object if parsing fails using try-catch.
const parsejson=(JSON:string):object=>{
try{
return JSON.parse(JSON);
}
catch(){
return {data:"parsing failed"}
}

}

9. Play with Utility Types
Task: Use Partial<T> to create a function updateUser that updates only a part of the user object.
Task: Use Pick<T, K> to define a type for a UserSummary object that includes only the id and name properties of a User.


10. TypeScript + DOM
Task: Write a TypeScript function that takes an id of an HTML element, retrieves the element, and changes its background color.
Task: Create a form with TypeScript that collects user data (e.g., name, email). Use TypeScript to validate the data before submission.


